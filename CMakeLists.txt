cmake_minimum_required(VERSION 3.19)
set (CMAKE_CXX_STANDARD 20)
project(v3d-wasm)

string(TOLOWER ${CMAKE_BUILD_TYPE} BUILD_CONFIG_LOWER)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

find_program(CCACHE_FOUND ccache)
if(CCACHE_FOUND)
    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)
endif()

if(EMSCRIPTEN)
    set(EM_FLAGS "-std=c++20 --bind")
    if (${BUILD_CONFIG_LOWER} MATCHES "debug")
        message("Building WASM in debug mode")
        set(EM_FLAGS "${EM_FLAGS} -g --source-map-base http://127.0.0.1:5500/dist/. -s DISABLE_EXCEPTION_CATCHING=0")
    else()
        message("Building WASM in release mode")
        set(EM_FLAGS "${EM_FLAGS} -Os ")
    endif()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${EM_FLAGS}")
    foreach(FLAG_VAR CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO)
        if(${FLAG_VAR} MATCHES "-g")
            string(REGEX REPLACE "-g" "-g4" ${FLAG_VAR} "${${FLAG_VAR}}")
        endif()
    endforeach()
    set(PRE_POST "--pre-js ${CMAKE_CURRENT_SOURCE_DIR}/common/pre.js --post-js ${CMAKE_CURRENT_SOURCE_DIR}/common/post.js")
    set(CMAKE_EXE_LINKER_FLAGS "${EM_FLAGS} ${PRE_POST} --bind -s TOTAL_MEMORY=33554432 -s ALLOW_MEMORY_GROWTH=1")
    include_directories(/install/emscripten/include)
    include_directories(/install/emscripten/boost_1_81_0)
    list(APPEND CMAKE_PREFIX_PATH "/install/emscripten")
    set(Eigen3_DIR "/install/emscripten/share/eigen3/cmake")
    link_directories("/install/native/lib")
else()
    message(STATUS "Compiling native C++")
    include_directories(/install/native/include)
    include_directories(/install/native/boost_1_81_0)
    list(APPEND CMAKE_PREFIX_PATH "/install/native")
    link_directories("/install/native/lib")
endif()
message(STATUS CMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS})

# Build source code as a library

find_package(Eigen3 REQUIRED)
include_directories(cxx/src)
file(GLOB V3D_CXX_FILES "cxx/src/*.cpp")
add_library(libv3d ${V3D_CXX_FILES})
target_link_libraries(libv3d ${Boost_LIBRARIES} Eigen3::Eigen geometry-central)

if(EMSCRIPTEN)
    add_executable(v3d-wasm "cxx/src/Embind.cc")
    target_link_libraries(v3d-wasm ${Boost_LIBRARIES} libv3d)
else() # Native unit tests
    find_package(GTest REQUIRED)
    file(GLOB CLP_APP_FILES "cxx/tests/*.cpp")
    add_executable(v3d_tests ${CLP_APP_FILES} )
    target_link_libraries(v3d_tests ${Boost_LIBRARIES} libv3d GTest::GTest GTest::gtest_main)
endif()
